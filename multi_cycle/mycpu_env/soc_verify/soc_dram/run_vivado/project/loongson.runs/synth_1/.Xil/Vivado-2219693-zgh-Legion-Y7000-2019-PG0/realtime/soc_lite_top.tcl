# 
# Synthesis run script generated by Vivado
# 

namespace eval rt {
    variable rc
}
set rt::rc [catch {
  uplevel #0 {
    set ::env(BUILTIN_SYNTH) true
    source $::env(HRT_TCL_PATH)/rtSynthPrep.tcl
    rt::HARTNDb_startJobStats
    set rt::cmdEcho 0
    rt::set_parameter writeXmsg true
    rt::set_parameter enableParallelHelperSpawn true
    set ::env(RT_TMP) "./.Xil/Vivado-2219693-zgh-Legion-Y7000-2019-PG0/realtime/tmp"
    if { [ info exists ::env(RT_TMP) ] } {
      file mkdir $::env(RT_TMP)
    }

    rt::delete_design

    set rt::partid xc7a200tfbg676-1
     file delete -force synth_hints.os

    set rt::multiChipSynthesisFlow false
    source $::env(SYNTH_COMMON)/common_vhdl.tcl
    set rt::defaultWorkLibName xil_defaultlib

    # Skipping read_* RTL commands because this is post-elab optimize flow
    set rt::useElabCache true
    if {$rt::useElabCache == false} {
      rt::read_verilog -sv -include {
    /home/zgh/learn_files/LoongArch_learning/exp6/mycpu_env/soc_verify/soc_dram/rtl/xilinx_ip/clk_pll
    /home/zgh/learn_files/LoongArch_learning/exp6/mycpu_env/soc_verify/soc_dram/rtl/xilinx_ip/data_ram
    /home/zgh/learn_files/LoongArch_learning/exp6/mycpu_env/soc_verify/soc_dram/rtl/xilinx_ip/inst_ram
  } /home/zgh/tools/Vivado/2019.2/data/ip/xpm/xpm_cdc/hdl/xpm_cdc.sv
      rt::read_verilog -include {
    /home/zgh/learn_files/LoongArch_learning/exp6/mycpu_env/soc_verify/soc_dram/rtl/xilinx_ip/clk_pll
    /home/zgh/learn_files/LoongArch_learning/exp6/mycpu_env/soc_verify/soc_dram/rtl/xilinx_ip/data_ram
    /home/zgh/learn_files/LoongArch_learning/exp6/mycpu_env/soc_verify/soc_dram/rtl/xilinx_ip/inst_ram
  } {
      ./.Xil/Vivado-2219693-zgh-Legion-Y7000-2019-PG0/realtime/clk_pll_stub.v
      ./.Xil/Vivado-2219693-zgh-Legion-Y7000-2019-PG0/realtime/inst_ram_stub.v
      /home/zgh/learn_files/LoongArch_learning/exp6/mycpu_env/myCPU/alu.v
      /home/zgh/learn_files/LoongArch_learning/exp6/mycpu_env/soc_verify/soc_dram/rtl/BRIDGE/bridge_1x2.v
      /home/zgh/learn_files/LoongArch_learning/exp6/mycpu_env/soc_verify/soc_dram/rtl/CONFREG/confreg.v
      /home/zgh/learn_files/LoongArch_learning/exp6/mycpu_env/myCPU/mycpu_top.v
      /home/zgh/learn_files/LoongArch_learning/exp6/mycpu_env/myCPU/regfile.v
      /home/zgh/learn_files/LoongArch_learning/exp6/mycpu_env/myCPU/tools.v
      /home/zgh/learn_files/LoongArch_learning/exp6/mycpu_env/soc_verify/soc_dram/rtl/soc_lite_top.v
    }
      rt::read_vhdl -lib dist_mem_gen_v8_0_13 /home/zgh/learn_files/LoongArch_learning/exp6/mycpu_env/soc_verify/soc_dram/rtl/xilinx_ip/data_ram/hdl/dist_mem_gen_v8_0_vhsyn_rfs.vhd
      rt::read_vhdl -lib xil_defaultlib /home/zgh/learn_files/LoongArch_learning/exp6/mycpu_env/soc_verify/soc_dram/rtl/xilinx_ip/data_ram/synth/data_ram.vhd
      rt::read_vhdl -lib xpm /home/zgh/tools/Vivado/2019.2/data/ip/xpm/xpm_VCOMP.vhd
      rt::filesetChecksum
    }
    rt::set_parameter usePostFindUniquification true
    set rt::SDCFileList ./.Xil/Vivado-2219693-zgh-Legion-Y7000-2019-PG0/realtime/soc_lite_top_synth.xdc
    rt::sdcChecksum
    set rt::top soc_lite_top
    rt::set_parameter enableIncremental true
    set rt::reportTiming false
    rt::set_parameter elaborateOnly false
    rt::set_parameter elaborateRtl false
    rt::set_parameter eliminateRedundantBitOperator true
    rt::set_parameter elaborateRtlOnlyFlow false
    rt::set_parameter writeBlackboxInterface true
    rt::set_parameter ramStyle auto
    rt::set_parameter merge_flipflops true
# MODE: 
    rt::set_parameter webTalkPath {/home/zgh/learn_files/LoongArch_learning/exp6/mycpu_env/soc_verify/soc_dram/run_vivado/project/loongson.cache/wt}
    rt::set_parameter enableSplitFlowPath "./.Xil/Vivado-2219693-zgh-Legion-Y7000-2019-PG0/"
    set ok_to_delete_rt_tmp true 
    if { [rt::get_parameter parallelDebug] } { 
       set ok_to_delete_rt_tmp false 
    } 
    if {$rt::useElabCache == false} {
        set oldMIITMVal [rt::get_parameter maxInputIncreaseToMerge]; rt::set_parameter maxInputIncreaseToMerge 1000
        set oldCDPCRL [rt::get_parameter createDfgPartConstrRecurLimit]; rt::set_parameter createDfgPartConstrRecurLimit 1
        $rt::db readXRFFile
      rt::run_synthesis -module $rt::top
        rt::set_parameter maxInputIncreaseToMerge $oldMIITMVal
        rt::set_parameter createDfgPartConstrRecurLimit $oldCDPCRL
    }

    set rt::flowresult [ source $::env(SYNTH_COMMON)/flow.tcl ]
    rt::HARTNDb_stopJobStats
    rt::HARTNDb_reportJobStats "Synthesis Optimization Runtime"
    rt::HARTNDb_stopSystemStats
    if { $rt::flowresult == 1 } { return -code error }


  set hsKey [rt::get_parameter helper_shm_key] 
  if { $hsKey != "" && [info exists ::env(BUILTIN_SYNTH)] && [rt::get_parameter enableParallelHelperSpawn] } { 
     $rt::db killSynthHelper $hsKey
  } 
  rt::set_parameter helper_shm_key "" 
    if { [ info exists ::env(RT_TMP) ] } {
      if { [info exists ok_to_delete_rt_tmp] && $ok_to_delete_rt_tmp } { 
        file delete -force $::env(RT_TMP)
      }
    }

    source $::env(HRT_TCL_PATH)/rtSynthCleanup.tcl
  } ; #end uplevel
} rt::result]

if { $rt::rc } {
  $rt::db resetHdlParse
  set hsKey [rt::get_parameter helper_shm_key] 
  if { $hsKey != "" && [info exists ::env(BUILTIN_SYNTH)] && [rt::get_parameter enableParallelHelperSpawn] } { 
     $rt::db killSynthHelper $hsKey
  } 
  source $::env(HRT_TCL_PATH)/rtSynthCleanup.tcl
  return -code "error" $rt::result
}
